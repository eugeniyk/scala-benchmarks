package scala.benchmarks.collections

import java.util.concurrent.TimeUnit

import org.openjdk.jmh.annotations._
import org.openjdk.jmh.infra.Blackhole

import scala.benchmarks.collections.SortingTest.CollectionState

object SortingTest {
  @State(Scope.Benchmark)
  class CollectionState() {
    private val item = "test"

    @Param(Array("10", "100", "1000"))
    var collectionSize: Int = 0

    var listCollection: List[String] = List.empty
    var vectorCollection: Vector[String] = Vector.empty
    var arrayCollection: Array[String] = Array.empty
    var setCollection: Set[String] = Set.empty

    @Setup()
    def setup(): Unit = {
      listCollection = List(Range(0, collectionSize).map(i => i + item + i) :_*)
      vectorCollection = Vector(Range(0, collectionSize).map(i => i + item + i) :_*)
      arrayCollection = Array(Range(0, collectionSize).map(i => i + item + i) :_*)
      setCollection = Set(Range(0, collectionSize).map(i => i + item + i) :_*)
    }
  }
}

/**
  * This benchmarks is to find out the garbage generated by foldLeft with primitive types
  *
  * sbt "jmh:run -i 10 -wi 5 -f1 -t1 SortingTest.* -prof gc"
  */
@BenchmarkMode(Array(Mode.AverageTime))
@OutputTimeUnit(TimeUnit.NANOSECONDS)
class SortingTest {
  @Benchmark
  def regularSortList(bh: Blackhole, state: CollectionState) = {
    state.listCollection.sorted
  }

  @Benchmark
  def regularSortVector(bh: Blackhole, state: CollectionState) = {
    state.vectorCollection.sorted
  }

  @Benchmark
  def regularSortArray(bh: Blackhole, state: CollectionState) = {
    state.arrayCollection.sorted
  }
}
