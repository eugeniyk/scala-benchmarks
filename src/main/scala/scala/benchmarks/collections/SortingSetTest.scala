package scala.benchmarks.collections

import java.util.concurrent.TimeUnit

import org.openjdk.jmh.annotations._
import org.openjdk.jmh.infra.Blackhole

import scala.benchmarks.collections.SortingTest.CollectionState
import scala.collection.immutable.SortedSet


/**
  * This benchmarks is to find out the garbage generated by foldLeft with primitive types
  *
  * sbt "jmh:run -i 10 -wi 5 -f1 -t1 SortingSetTest.* -prof gc"
  */
@BenchmarkMode(Array(Mode.AverageTime))
@OutputTimeUnit(TimeUnit.NANOSECONDS)
class SortingSetTest {
  @Benchmark
  def sortSetViaList(bh: Blackhole, state: CollectionState) = {
    state.setCollection.toList.sorted
  }

  @Benchmark
  def sortSetViaArray(bh: Blackhole, state: CollectionState) = {
    state.setCollection.toArray.sorted
  }

  @Benchmark
  def sortSetViaSeq(bh: Blackhole, state: CollectionState) = {
    state.setCollection.toSeq.sorted
  }

  @Benchmark
  def sortSetViaIndexedSeq(bh: Blackhole, state: CollectionState) = {
    state.setCollection.toIndexedSeq.sorted
  }

  @Benchmark
  def sortSetViaArrayJava(bh: Blackhole, state: CollectionState) = {
    val array = state.setCollection.toArray.asInstanceOf[Array[AnyRef]]
    java.util.Arrays.sort(array)
    array.asInstanceOf[Array[String]]
  }

  @Benchmark
  def sortSetViaBuffer(bh: Blackhole, state: CollectionState) = {
    state.setCollection.toBuffer.sorted
  }

  @Benchmark
  def sortSetViaSortedSet(bh: Blackhole, state: CollectionState) = {
    SortedSet.empty[String] ++ state.setCollection
  }
}
