package scala.benchmarks.collections

import java.util.concurrent.TimeUnit

import org.openjdk.jmh.annotations._

import scala.benchmarks.collections.FoldLeftPrimitiveTypesTest.CollectionState
import scala.benchmarks.collections.FoldMonadicTest.FoldState
import scala.benchmarks.collections.monoid.Monoid.TraversableOnceWithMonoid
import scala.benchmarks.collections.monoid.{CompareResult, Monoid}

object FoldMonadicTest {
  @State(Scope.Benchmark)
  class FoldState() {
    @Param(Array("10", "100"))
    var streamSize: Int = 0

    var seq: List[CompareResult] = _

    @Setup()
    def setup(): Unit = {
      seq = List.fill(streamSize)(CompareResult.sameProperty)
    }
  }
}

/**
  * This benchmarks is to find out the garbage generated by foldLeft with primitive types
  *
  * sbt "jmh:run -i 7 -wi 3 -f1 -t1 FoldMonadicTest.* -prof gc"
  */
@BenchmarkMode(Array(Mode.AverageTime))
@OutputTimeUnit(TimeUnit.NANOSECONDS)
class FoldMonadicTest {

  @Benchmark
  def foldMonadic(state: FoldState) = {
    state.seq.foldM
  }

  @Benchmark
  def foldOptimized(state: FoldState) = {
    state.seq.foldE
  }
}
